{
    "Component Template": {
        "prefix": "shak-component",
        "description": "Create a new component class for ShakEngine",
        "body": [
            "#pragma once",
            "",
            "#include \"Component.h\"",
            "",
            "class ${1:ExampleComponent} : public shak::Component",
            "{",
            "public:",
            "    ${1:ExampleComponent}(shak::GameObject* owner)",
            "        : shak::Component(owner)",
            "    {",
            "    }",
            "",
            "    ~${1:ExampleComponent}() override",
            "    {",
            "    }",
            "",
            "    void Awake() override",
            "    {",
            "    }",
            "",
            "    void Update(float dt) override",
            "    {",
            "    }",
            "",
            "    void LateUpdate(float dt) override",
            "    {",
            "    }",
            "",
            "    void HandleInput(const sf::Event& event) override",
            "    {",
            "    }",
            "",
            "    void OnCollision(const std::shared_ptr<shak::GameObject>& other) override",
            "    {",
            "    }",
            "",
            "    void OnDestroy() override",
            "    {",
            "    }",
            "",
            "private:",
            "",
            "};"
        ]
    },
    "GameObject Template": {
        "prefix": "shak-gameobject",
        "description": "Create a new game object class for ShakEngine",
        "body": [
            "#pragma once",
            "",
            "#include \"GameObject.h\"",
            "",
            "class ${1:MyGameObject} : public shak::GameObject",
            "{",
            "public:",
            "    ${1:MyGameObject}()",
            "        : GameObject()",
            "    {",
            "    }",
            "",
            "    ~${1:MyGameObject}() override",
            "    {",
            "    }",
            "",
            "    void Awake() override",
            "    {",
            "    }",
            "",
            "    void Update(float dt) override",
            "    {",
            "    }",
            "",
            "    void LateUpdate(float dt) override",
            "    {",
            "    }",
            "",
            "    void HandleInput(const sf::Event& event) override",
            "    {",
            "    }",
            "",
            "    void OnCollision(const std::shared_ptr<shak::GameObject>& other) override",
            "    {",
            "    }",
            "",
            "    void OnDestroy() override",
            "    {",
            "    }",
            "",
            "    void Cleanup() override",
            "    {",
            "    }",
            "",
            "private:",
            "",
            "};"
        ]
    },
    "Scene Template": {
        "prefix": "shak-scene",
        "description": "Create a new scene class for ShakEngine",
        "body": [
            "#pragma once",
            "",
            "#include \"Scene.h\"",
            "#include \"Camera.h\"",
            "",
            "class ${1:MyGameScene} : public shak::Scene",
            "{",
            "public:",
            "    ${1:MyGameScene}(const std::string& name) : Scene(name)",
            "    {",
            "    }",
            "",
            "    ~${1:MyGameScene}() override",
            "    {",
            "    }",
            "",
            "    void Init() override",
            "    {",
            "        auto camera1 = m_renderer->AddCamera(\"camera1\", sf::FloatRect({ 0, 0 }, { 1920, 1080 }), shak::CameraResizeBehavior::Letterbox);",
            "    }",
            "",
            "    void Clear() override",
            "    {",
            "    }",
            "};"
        ]
    }
}